var Notes = (function () {

    var NOTES = [['A', 'As', 'B', 'C', 'Cs', 'D', 'Ds', 'E', 'F', 'Fs', 'G', 'Gs'], ['A', 'Bf', 'B', 'C', 'Df', 'D', 'Ef', 'E', 'F', 'Gf', 'G', 'Af']],
        NOTES_NAME = [['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'], ['A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab']],

        SCALE = [
            Cromatic = {
                name: 'Cromatic Scale',
                intervals: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            },

            MajorScale = {
                name: 'Major',
                intervals: [0, 2, 2, 1, 2, 2, 2, 1]
            },

            MinorScale = {
                name: 'Minor',
                intervals: [0, 2, 1, 2, 2, 1, 2, 2]
            },

            // HarmonicMajor = {
            //     name : 'Harmonic major',
            //     intervals : [0, 2, 2, 1, 2, 1, 2, 3]
            //     },

            // HarmonicMinor = {
            //     name : 'Harmonic Minor',
            //     intervals : [0, 2, 1, 2, 2, 1, 3, 1]
            //     },

            MelodicMajor = {
                name: 'Melodic Major',
                intervals: [0, 2, 2, 1, 2, 1, 2, 2]
            },

            MelodicMinor = {
                name: 'Melodic Minor',
                intervals: [0, 2, 1, 2, 2, 2, 2, 2]
            },

            PentatonicMajor = {
                name: 'Major Pentatonic',
                intervals: [0, 2, 2, 3, 2, 3]
            },

            PentatonicMinor = {
                name: 'Pentatonic Minor',
                intervals: [0, 3, 2, 2, 3, 2]
            },

            Blues = {
                name: 'blues',
                intervals: [0, 3, 2, 1, 1, 3, 2]
            }
        ],

        _way_to_show_notes = 0,

        _notes_from_tonic_classes = [],

        _notes_from_tonic_name = [],

        THE_SCALE = [];


    /*
     --------------------------------------
     TO POPULATE SELECT
     --------------------------------------
     */

    var getNotes = function () {
        return NOTES_NAME[_way_to_show_notes];
    };


    var getScaleName = function () {
        var scalesName = [];

        for (var i = 0; i < SCALE.length; i++) {
            scalesName.push(SCALE[i].name);
        }

        return scalesName;
    };


    var getScaleIntervals = function (index) {
        return SCALE[index].intervals;
    };

    /*
     --------------------------------------
     GET THE SCALE STARTING FROM THE TONIC NOTE
     --------------------------------------
     */

    var getNotesFromTonic = function (interval) {

        return slideToTheRightTonic(interval);

    };

    function slideToTheRightTonic(int) {

        var notes_from_tonic_note_classes = NOTES[_way_to_show_notes].slice(0),
            notes_from_tonic_note_name = NOTES_NAME[_way_to_show_notes].slice(0);

        for (var i = 0; i < int; i++) {
            var classe = notes_from_tonic_note_classes.shift();
            notes_from_tonic_note_classes.push(classe);

            var name = notes_from_tonic_note_name.shift();
            notes_from_tonic_note_name.push(name);
        }

        _notes_from_tonic_classes = notes_from_tonic_note_classes;
        _notes_from_tonic_name = notes_from_tonic_note_name;


        return {
            names: _notes_from_tonic_name,
            classes: _notes_from_tonic_classes
        };
    }


    /*
     --------------------------------------
     GET THE SCALE WE WANT
     --------------------------------------
     */

    var getScale = function (intervals) {
        var single_interval = 0;

        THE_SCALE = [];

        for (var i = 0; i < intervals.length - 1; i++) {
            single_interval += intervals[i];
            THE_SCALE.push(_notes_from_tonic_classes[single_interval]);

        }

        return THE_SCALE;
    };

    return {
        getNotes: getNotes,
        getScaleName: getScaleName,
        getScaleIntervals: getScaleIntervals,
        getScale: getScale,
        getNotesFromTonic: getNotesFromTonic
    };

})();
;var Instrument = (function () {

    var _instrument = document.querySelector(".instrument .container"),
        _interval_semitones = 0,
        instrumentsOnStage = [],
        drawFretboard = function (Instrument) {
            var obj = Instrument;
            renderIt(obj);
        },

        paintNotes = function (notesOfScale) {
            PaintNotes(notesOfScale);
        },

        showFretboard = function (int) {

            var removeInstrument = _instrument.querySelectorAll('.on'),
                indexInstrument;

            for (indexInstrument = removeInstrument.length; indexInstrument--;) {
                removeClass(removeInstrument[indexInstrument], 'on');
            }

            instrumentsOnStage[int].className += ' on';
        }
        ;

    function renderIt(object) {

        var obj = object,
            _fretboard = document.createElement('div'),
            note_name = [],
            note_class = [];

        instrumentsOnStage.push(_fretboard);
        console.log('rendering' + instrumentsOnStage);

        for (var i = 0; i < obj.strings.length; i++) {

            var _step = document.createElement('div'),
                notes = Notes.getNotesFromTonic(obj.strings[i]);

            _step.className = 'string';

            note_name = notes.names;
            note_class = notes.classes;

            for (var j = 0; j < obj.number; j++) {

                _interval_semitones++;

                if (_interval_semitones > note_class.length - 1) {
                    resetInterval();
                }

                var _semitone = document.createElement('div');
                _semitone.className = 'note ' + note_class[_interval_semitones];

                if (i !== 0) {
                    var _p = document.createElement('p');
                    _p.innerHTML = note_name[_interval_semitones];

                    _semitone.appendChild(_p);
                }
                _step.appendChild(_semitone);
            }


            resetInterval();

            if (_fretboard.firstChild === null) {
                _fretboard.appendChild(_step);
            }
            else {
                _fretboard.insertBefore(_step, _fretboard.firstChild);
            }


        }

        for (var b = 0; b < obj.inlays; b++) {
            var _inlay = document.createElement('div');
            _inlay.className = 'inlays';
            _fretboard.appendChild(_inlay);

            _fretboard.insertBefore(_inlay, _fretboard.firstChild);
        }

        _fretboard.className = 'fretboard ' + obj.name;


        _instrument.appendChild(_fretboard);

    }

    function resetInterval() {
        _interval_semitones = 0;
        return _interval_semitones;
    }


    function PaintNotes(noteToHighlight) {

        var removeTonic = _instrument.querySelectorAll('.tonic'),
            removeHighlighted = _instrument.querySelectorAll('.highlighted'),
            indexTonic,
            indexHighlighted;

        for (indexTonic = removeTonic.length; indexTonic--;) {
            removeClass(removeTonic[indexTonic], 'tonic');
        }

        for (indexHighlighted = removeHighlighted.length; indexHighlighted--;) {
            removeClass(removeHighlighted[indexHighlighted], 'highlighted');
        }

        // highlighting notes on fretboard
        for (var z = 0; z < noteToHighlight.length; z++) {

            var notes_name = noteToHighlight[z],
                notes = _instrument.querySelectorAll('.' + notes_name),
                typeOfNote;

            if (z !== 0) {
                typeOfNote = " highlighted";
            }
            else {
                typeOfNote = " tonic";
            }

            for (var i = 0; i < notes.length; i++) {
                // console.log(noteToHighlight + ' : ' + noteToHighlight[z] + "(" + z + ")," + typeOfNote);
                notes[i].className += typeOfNote;
            }

            // console.log('--------------');
        }
    }

    function removeClass(node, className) {
        if (hasClass(node, className)) {
            var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
            node.className = node.className.replace(reg, ' ');
        }
    }

    function hasClass(node, className) {

        // console.log(node + ' / ' + node.className);

        if (node.className) {
            return node.className.match(
                new RegExp('(\\s|^)' + className + '(\\s|$)'));
        } else {
            return false;
        }
    }

    return {
        show: showFretboard,
        draw: drawFretboard,
        drawNotes: paintNotes
    };
})();;var showMeScalesApp = (function () {

    var tonic = '',
        scale = '',
        notesArray = '',
        instrument_to_play,

        instruments_Available = [
            Guitar = {
                name: 'guitar',
                strings: [0, 7, 0, 5, 10, 2, 7],
                number: 22,
                inlays: 10
            },
            Bass_5_strings = {
                name: 'bass',
                strings: [0, 7, 0, 5, 10, 0],
                number: 20,
                inlays: 9
            }
            //,
            //Bass_4_strings = {
            //    name: '4 Strings Bass',
            //    strings: [0, 7, 0, 5, 0],
            //    number: 20,
            //    inlays: 9
            //},
            //
            //Ukulele = {
            //    name: 'Ukulele',
            //    strings: [0, 10, 4, 7, 0, 0],
            //    number: 18,
            //    inlays: 9
            //},
            //Banjo = {
            //    name: 'Banjo',
            //    strings: [0, 10, 4, 7, 0, 0],
            //    number: 18,
            //    inlays: 9
            //},
            //Mandolino = {
            //    name: 'Mandolino',
            //    strings: [0, 10, 4, 7, 0, 0],
            //    number: 18,
            //    inlays: 9
            //}
        ],

        getInstrument = function () {
            var instrumentNames = [];

            for (var i = 0; i < instruments_Available.length; i++) {
                instrumentNames.push(instruments_Available[i].name);
                drawInstrument(i);
            }

            return instrumentNames;
        },

        showInstrument = function (i) {
            instrument_to_play = i;
            Instrument.show(instrument_to_play);
        },

        drawNotes = function (bool, i) {

            var isTonic = bool;

            console.log(isTonic);

            if (isTonic === true) {
                tonic = i;
                notesArray = Notes.getNotesFromTonic(tonic).classes[0];
                //console.log('showMeScales: tonic is ' + notesArray + ',tonic index is ' + tonic + ', scale is undefined');

                if (scale !== '') {
                    buildScale();
                }
            }
            else {
                scale = i;
                buildScale();
            }

            function buildScale() {
                var intervals = Notes.getScaleIntervals(scale);
                notesArray = Notes.getScale(intervals);
                //console.log('showMeScales: scale is ' + notesArray + ',tonic index is ' + tonic + ', scale is '+ scale);
            }

            Instrument.drawNotes(notesArray);
        },

        getNotes = function () {
            return Notes.getNotes();
        },

        getScaleName = function () {
            return Notes.getScaleName();
        };

    function drawInstrument(i) {
        Instrument.draw(instruments_Available[i]);
    }

    return {
        instruments: instruments_Available,

        drawNotes: drawNotes,
        showInstrument: showInstrument,

        getInstrument: getInstrument,
        getNotes: getNotes,
        getScaleName: getScaleName
    };


})();
;var Select = (function () {


    //VARS
    var _selection = document.querySelector(".selection .container"),
        _body = document.querySelector("body"),
        instrument_to_play = '',
        tonic = '';

    // CREATE THE ELEMENTS
    fillSelectWithContent('Show me the', 'scales', showMeScalesApp.getScaleName());
    fillSelectWithContent('Show me tonic', 'notes', showMeScalesApp.getNotes());
    fillSelectWithContent('Show me the', 'playinginstrument', showMeScalesApp.getInstrument());

    function fillSelectWithContent(text, name, content) {

        var box = document.createElement('div');

        var paragraph = document.createElement('p');
        paragraph.innerHTML = text;

        var span = document.createElement('span');
        span.innerHTML = text;

        span.addEventListener("click", function (el) {

                var ulToActive = el.target.className;
                var ul = document.querySelector("ul." + ulToActive);
                ul.className += ' active';
                // toggleDisplay(ul);
            }
        );

        var select = document.createElement('ul');
        select.className = 'list ' + name;

        switch (name) {
            case 'scales':
                span.innerHTML = 'scales';
                span.className = 'scales ';
                box.className = 'box scales disabled';
                break;
            case 'notes' :
                span.innerHTML = 'notes';
                span.className = 'notes ';
                box.className = 'box notes disabled';
                break;
            case 'playinginstrument' :
                span.innerHTML = 'instrument';
                span.className = 'playinginstrument';
                box.className = 'box playinginstrument';
                break;
        }

        // populate the list with real content
        for (var i = 0; i < content.length; i++) {
            var opt = document.createElement('li');
            opt.innerHTML = content[i];
            setValue(opt, i, name, content[i]);
            //  toggleDisplay(select);
            select.appendChild(opt);
        }

        box.appendChild(paragraph);
        box.appendChild(span);
        _body.appendChild(select);
        _selection.appendChild(box);
    }


    function toggleDisplay(el) {
        var y = el.style && el.style.display ? el.style.display : 'block';

        if (y == 'block') {
            // console.log('this element has display block');
            // el.style.opacity='0';
            // setTimeout( function(){ el.style.display = 'none'; }, 750 );
        }
        else {
            // console.log('this element has not block!');
            // el.style.display='block';
            // setTimeout( function(){ el.style.opacity = '1'; }, 10 );
        }
    }


    function setValue(el, i, c, s) {

        var listElement = el,
            index = i,
            classOfParent = c,
            string = s;

        listElement.addEventListener("click", function () {

                var ul = document.querySelector("ul.active");
                ul.className = '';
                ul.className = 'list ' + classOfParent;

                switch (classOfParent) {
                    case 'scales':
                        setScale(index, string);
                        break;
                    case 'notes' :
                        setTonic(index, string);
                        break;
                    case 'playinginstrument' :
                        setInstrument(index, string);
                        break;
                }
            }
        );
    }

    function setInstrument(index, string) {

        // just once
        if (instrument_to_play === '') {

            var sel = document.querySelector('.box.playinginstrument p');
            sel.innerHTML = 'on ';

            var notes = document.querySelector('.box.disabled.notes');
            notes.className = 'box notes';

        }

        var sp = document.querySelector('.box.playinginstrument span');
        sp.innerHTML = string;

        instrument_to_play = index;
        showMeScalesApp.showInstrument(index);
    }

    function setTonic(note, string) {

        if (tonic === '') {
            var sel = _selection.querySelector('.box.notes p');
            sel.innerHTML = 'of tonic';
            var notes = _selection.querySelector('.box.scales.disabled');
            notes.className = 'box scales';
        }

        var sp = document.querySelector('.box.notes span');
        sp.innerHTML = string;

        tonic = note;

        //console.log('select js: tonic is ' + tonic);
        showMeScalesApp.drawNotes(true, tonic);

    }

    function setScale(scale, string) {

        var sp = document.querySelector('.box.scales span');
        sp.innerHTML = string;

        //console.log('select js: scale is ' + scale);
        showMeScalesApp.drawNotes(false, scale);
    }


})();